#BlueJ class context
comment0.target=TernaryTree
comment0.text=\n\ A\ generic-type\ ternary\ search\ tree\n\n\ @author\ Eric\ Boris\n\ @version\ 11/4/18\n
comment1.params=
comment1.target=TernaryTree()
comment1.text=\n\ construct\ a\ new\ tree\n
comment10.params=nodeArray\ start\ end
comment10.target=TernaryNode\ arrayToTree(TernaryNode[],\ int,\ int)
comment10.text=\n\ return\ the\ root\ node\ of\ a\ balanced\ binary\ tree\ from\ an\ ordered\ array\ of\ nodes\n\ \n\ @param\ \ \ nodeArray\ \ \ \ \ \ \ the\ ordered\ array\n\ @param\ \ \ start\ \ \ \ \ \ \ \ \ \ \ the\ current\ start\ index\ of\ the\ array\n\ @param\ \ \ end\ \ \ \ \ \ \ \ \ \ \ \ \ the\ currend\ end\ index\ of\ the\ array\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ root\ node\ of\ a\ balance\ binary\ tree\n
comment2.params=data\ index
comment2.target=void\ add(java.lang.Comparable,\ int)
comment2.text=\ \n\ add\ a\ new\ node\ \n\ \n\ @param\ \ \ data\ \ \ \ \ \ \ \ the\ data\ for\ the\ node\n\ @param\ \ \ index\ \ \ \ \ \ \ the\ index\ data\ for\ the\ node\n
comment3.params=data\ index\ node
comment3.target=TernaryNode\ add(java.lang.Comparable,\ int,\ TernaryNode)
comment3.text=\n\ add\ a\ new\ node\n\ \n\ @param\ \ \ data\ \ \ \ \ \ \ \ the\ data\ for\ the\ node\n\ @param\ \ \ index\ \ \ \ \ \ \ the\ index\ data\ for\ the\ node\n\ @param\ \ \ node\ \ \ \ \ \ \ \ the\ root\ node\ to\ compare\ against\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ return\ a\ new\ node\n
comment4.params=index\ node
comment4.target=UnaryNode\ addUnary(int,\ UnaryNode)
comment4.text=\n\ add\ a\ unary\ node\n\ \n\ @param\ \ \ index\ \ \ \ \ \ \ the\ index\ data\ for\ the\ node\n\ @param\ \ \ node\ \ \ \ \ \ \ \ the\ root\ node\ to\ compare\ against\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ a\ new\ node\n
comment5.params=
comment5.target=int[]\ getAll()
comment5.text=\n\ get\ all\ the\ nodes\ of\ the\ tree\ in\ order\n\ \n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ an\ ordered\ array\ of\ all\ of\ the\ nodes'\ indexs\n
comment6.params=indicesArray\ node
comment6.target=int[]\ getAll(int[],\ TernaryNode)
comment6.text=\n\ search\ through\ each\ node\ and\ return\ an\ ordered\ array\ of\ elements\n\ \n\ @param\ \ \ indicesArray\ \ \ \ \ \ \ \ an\ ordered\ array\ of\ each\ node's\ index\ data\n\ @param\ \ \ node\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ current\ node\ in\ the\ tree\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ an\ ordered\ array\ of\ each\ node's\ index\ data\ \ \ \n
comment7.params=indicesArray\ node
comment7.target=int[]\ getAllSame(int[],\ UnaryNode)
comment7.text=\n\ get\ the\ index\ data\ of\ each\ unary\ node\n\ \n\ @param\ \ \ indicesArray\ \ \ \ \ \ \ \ an\ ordered\ array\ of\ each\ node's\ index\ data\n\ @param\ \ \ node\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ current\ node\ in\ the\ tree\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ an\ ordered\ array\ of\ each\ node's\ index\ data\ \ \ \n
comment8.params=
comment8.target=void\ balance()
comment8.text=\n\ balance\ the\ tree's\ nodes\n
comment9.params=nodeArray\ node
comment9.target=TernaryNode[]\ getOrderedNodes(TernaryNode[],\ TernaryNode)
comment9.text=\n\ get\ an\ ordered\ array\ of\ all\ the\ nodes\ in\ the\ tree\ \n\ \n\ @param\ \ \ nodeArray\ \ \ \ \ \ \ an\ array\ to\ add\ nodes\ to\n\ @param\ \ \ node\ \ \ \ \ \ \ \ \ \ \ \ the\ current\ root\ node\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ an\ ordered\ array\ of\ nodes\n
numComments=11
